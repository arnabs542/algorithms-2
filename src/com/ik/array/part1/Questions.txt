 	
Q1	Array product	Coding	submitted	Modify Submission
Q2	Merge Overlapping Intervals	Coding	submitted	Modify Submission
Q3	2D array search	Coding	submitted	Modify Submission
Q4	Area under histogram	Coding	not answered	Solve Question
Q5	Print Pascal's triangle	Coding	submitted	Modify Submission
Q6	SumZero	Coding	not answered	Solve Question


1.Array product
Array Product

 

Problem Statement:

Given an array of numbers nums of size n, find an array of numbers products of size n, such that products[i] is the product of all numbers nums[j], where j!=i.

 

Input Format:
There is only one argument: nums, denoting input array

 

Output Format:
Return an array of numbers products, denoting the required product array

 

Constraints:

You can't use division anywhere in solution
2 <= n <= 100000
-2147483648 <= nums[i] <= 2147483647, i=1,2,3,...,n
-2147483648 <= products[i] <= 2147483647, i=1,2,3,...,n
 

Expected Time Complexity : O(n)
Expected Auxillary Space Complexity : O(1)

 

Notes:

Usage of resultant products array will not be considered as extra space used.
Without using division is the key constraint to remember.
 

Sample Test Cases:

 

Sample Input 1:
5
1
2
3
4
5

 

Sample Output 1:
120
60
40
30
24

 

Explaination 1:
Resultant Product array products = [products[1], products[2], products[3], products[4], products[5]]
                = [(nums[2]*nums[3]*nums[4]*nums[5]), (nums[1]*nums[3]*nums[4]*nums[5]), (nums[1]*nums[2]*nums[4]*nums[5]), (nums[1]*nums[2]*nums[3]*nums[5]), (nums[1]*nums[2]*nums[3]*nums[4])]
                = [(2*3*4*5), (1*3*4*5), (1*2*4*5), (1*2*3*5), (1*2*3*4)]
                = [120, 60, 40, 30, 24]

 

 

Sample Input 2:
3
4
9
10

 

Sample Output 2:
90
40
36

 

Explaination 2:
Resultant Product array products = [products[1], products[2], products[3]]
                          = [(nums[2]*nums[3]), (nums[1]*nums[3]), (nums[1]*nums[2])]
                          = [(9*10), (4*10), (4*9)]
                          = [90, 40, 36] 

 

 

Suggestions:
Suggested time in interview: 20 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

2.Merge Overlapping Intervals
Merge Overlapping Intervals

 

Problem Statement:


Given an array of time intervals(in any order) inputArray of size n, merge all overlapping intervals into one and output the resulting array,
such that no two intervals in result array are overlapping. In other words, result array should contain only mutually exclusive intervals.

 

Input Format:


There is only one argument: inputArray, denoting input array of time intervals,
where inputArray is 2D array of n*2 size, denoting inputArray[i][0] as start point of ith interval, and inputArray[i][1] as end point of ith interval

 

Output Format:


Return an array of time intervals outputArray, denoting the required array of merged time intervals,
where outputArray is 2D array of n*2 size, denoting outputArray[i][0] as start point of ith interval, and outputArray[i][1] as end point of ith interval

(outputArray needs to be sorted in ascending order i.e. outputArray[i][0]<outputArray[i+1][0] and outputArray[i][1]<outputArray[i+1][1], i=0,1,...,(n-2))

 

Constraints:

 

1 <= n <= 105
-109 <= inputArray[0][i], inputArray[1][i] <= 109,   i=0, 1, ..., (n-1)
inputArray[0][i] <= inputArray[1][i],  i=0, 1, ..., (n-1)
 

Expected Time Complexity : O(n*log(n))
Expected Auxillary Space Complexity :  O(1)

 

Sample Test Cases:

 

Sample Input 1:


4
2
1 3
5 7
2 4
6 8

 

Sample Output 1:


1 4
5 8

 

Explanation 1:


The intervals {1,3} and {2,4} overlap with each other, so they should be merged and become {1,4}.
Similarly {5,7} and {6,8} should be merged and become {5,8}.

 

Sample Input 2:


7
2
100 154
13 47
1 5
2 9
7 11
51 51
47 50

 

Sample Output 2:


1 11
13 50
51 51
100 154

 

Explanation 2:


The intervals {1,5} and {2,9} overlap with each other, so they should be merged and become {1,9}.
Also, {1,9} and {7,11} overlap with each other, so they should be merged and become {1,11}
Similarly, The intervals {13,47} and {47,50} should be merged and become {13,50}.
Intervals {51,51} and {100,154} are kept as it is as they are not overlapping with any other intervals.

 

Suggestions:


Suggested time in interview: 20 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

3. 2D array search
Find a number in a sorted 2D array.

 

You're given a 2d array (N x M) where all the numbers (integers) in the array are in increasing order from left to right and top to bottom. You're also given a target number, to be searched inside the array. What is the best way to search and determine if a target number is in the array?

Solution: take inspiration from http://www.geeksforgeeks.org/search-in-row-wise-and-column-wise-sorted-matrix/

(Notice that this can be a very deceptive problem in a good way. Solution seems difficult, but it's actually quite simple.)

 

Notes:
Suggested time in interview: 20 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.


4.Area under histogram
(This is different from the Skyline problem, but some thinking is common)

 

Find the largest rectangular area possible in a given histogram where the largest rectangle can be made of a number of contiguous bars. For simplicity, assume that all bars have same width and the width is 1 unit.

For example, consider the following histogram with 7 bars of heights {6, 2, 5, 4, 5, 1, 6}. The largest possible rectangle possible is 12 (see the below figure, the max area rectangle is highlighted in red).

 

 



 

Solution: http://www.geeksforgeeks.org/largest-rectangle-under-histogram/

 

(Ideally, this would be with Linked Lists, Stacks and Queues homework, but that homework already has too many problems :-))

 

 

Notes:
Suggested time in interview: 30 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

5.Print Pascal's triangle
Pascal’s triangle is a triangular array of the binomial coefficients. Write a function that takes an integer value n as input and prints first n lines of the Pascal’s triangle. Following are the first 6 rows of Pascal’s Triangle.

1  
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
 

Solution: http://www.geeksforgeeks.org/pascal-triangle/

 

 

Notes:
Suggested time in interview: 30 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

6. SumZero
Given a set of integers, find a contiguous subset whose sum is zero. There can be duplicate numbers in the input.

 

Input: Integer array e.g. 5,1,2,-3,7,-4

output: A subset that sums to zero. 

e.g. 1,2,-3 OR -3,7,-4

 

* If there are no such subsets, then print nothing

* If there are multiple such subsets, then print any one

* If a matching subset is a subset of a larger matching subset, then print either one

* If there is a number '0' in the array, then it counts as a valid answer subarray.

 

What would be the complexity of the solution, if we were to print all subsets that sum to zero (instead of just one)? 

 

Solution: http://www.geeksforgeeks.org/find-if-there-is-a-subarray-with-0-sum/ (This is a variation of the Maximum Subarray problem)


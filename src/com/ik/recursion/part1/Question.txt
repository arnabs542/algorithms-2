Q1	OLD - Generate All Possible Expressions That Evaluate To The Given Target Value - OLD	Coding	not answered	Solve Question
Q2	OLD - Palindromic Decomposition - OLD	Coding	not answered	Solve Question
Q3	OLD - Generate All Subsets Of A Set - OLD	Coding	not answered	Solve Question
Q4	OLD - n Queen Problem - OLD	Coding	not answered	Solve Question
Q5	How Many Binary Search Trees With n Nodes?	Coding	not answered	Solve Question

1. OLD - Generate All Possible Expressions That Evaluate To The Given Target Value - OLD
 

Generate All Possible Expressions That Evaluate To The Given Target Value

 

 

Problem Statement: 

You are given a string s, containing only numerical characters ('0' - '9'). You are also given a non-negative number target.
You have to put between each pair of numerical characters, one of ("", "*", "+") operators such that the expression you get will evaluate to the target value.

Putting "" (an empty string) operator between two numerical characters means, that the they are joined (e.g. 1""2 = 12). 
Also the join can be extended further (e.g. 1""2""3 = 123).

Precedence of the operators matters. In higher to lower precedence:
Join ("") > Multiplication ("*") > Addition ("+") 

Input Format:
 

There are two arguments.
1) String s.
2) Long integer target. 

Output Format: 

Return array of strings containing ALL possible strings that evaluate to the target value.
You need not to worry about the order of strings in your output array. 
Like for s = "22" and target = 4, arrays ["2+2", "2*2"] and ["2*2", "2+2"] both will be accepted. 

Any string in the returned array should not contain any spaces. 
In the above example string "2+2" is expected, other strings containing any space like " 2+2", "2 + 2", "2 +2" etc. will give wrong answer. 

 

Constraints: 

1 <= |s| <= 13
s only contains numerical characters ('0' - '9').
0 <= target < 10^13
You have to return ALL possible strings that evaluate to target value.

Sample Test Cases:

Sample Input:

s = "222"
target = 24 

Sample Output:
["22+2", "2+22"]

Explanation: 

1) 22 + 2 = 24 (Here, we put "" operator between the first two characters and then put "+" operator between the last two characters.)
2) 2 + 22 = 24 (Here, we put "+" operator between the first two characters and then put "" operator between the last two characters.)

Notes:

Suggested time in interview: 40 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

2. OLD - Palindromic Decomposition - OLD
Palindromic Decomposition

Problem Statement: 

A Palindromic Decomposition of string, is a decomposition of the string into sub-strings, such that all those sub-strings are valid palindromes.
Given a string s, you have to find ALL possible palindromic decompositions of it. 

Input Format:
There is only one argument denoting string s. 

Output Format:
Return array of string containing ALL the palindromic decompositions.
To differentiate sub-strings in the decomposed string add '|' between them. (Look at the sample test cases for more clarity.)
You need not to worry about the order of strings in your output array. Like for s = "aa", arrays ["a|a", "aa"] and ["aa", "a|a"] both will be accepted.
 (Also note that string itself is also a sub-string.)

Constraints: 

1 <= |s| <= 20
s only contains lowercase letters ('a' - 'z').
You have to return ALL palindromic decompositions possible.

Sample Test Cases:
Sample Input:

"abracadabra" 

Sample Output:
[
    "a|b|r|a|c|a|d|a|b|r|a",

    "a|b|r|a|c|ada|b|r|a",

    "a|b|r|aca|d|a|b|r|a"
]
Notes:


Suggested time in interview: 40 minutes
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

3. OLD - Generate All Subsets Of A Set - OLD
 
Generate All Subsets Of A Set
 
 
Problem Statement:
 
Given a set (string s containing only lowercase letters ('a' - 'z')), you have to generate ALL possible subsets of it . 
 
Note that empty set is always a subset of any set.
 
Input Format:
 
There is only one argument denoting string s.
 
Output Format:
 
Return array of strings containing ALL possible subsets of given string.
 
You need not to worry about order of strings in your output array. Like for s = "a", arrays ["", "a"] and ["a", ""]  both will be accepted.
 
Constraints:
 
1 <= |s| <= 20
s only contains lowercase alphabetical letters ('a' - 'z').
You have to return ALL possible subsets. 
 
Sample Test Cases:
 
Sample Input:
 
"xy" 
 
Sample Output:
 
["", "x", "y", "xy"] 
 
[Remember that we are working with sets, so "yx" is not different from "xy", and "xx" is not a valid subset, unless the input also has two x's.]
 
Notes:
 
Suggested time in interview: 20 minutes
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.
 
 4. OLD - n Queen Problem - OLD
 

n Queen Problem

 

 

Problem Statement:

 

The n queen problem is the problem of placing n chess queens on an n * n chessboard, so that no two queens attack each other.

 

Your task is to find ALL possible arrangements for the n queen problem.

 

You have to solve this problem using recursion. (There may be other ways of solving this problem, but for the purpose of this exercise, please use recursion only).

 

A queen can move horizontally, vertically, or diagonally.

 

Input Format:

 

There is only one argument denoting integer n.

 

Output Format:

 

Return 2-D string array of size, number of solutions * n, where length of each string is n. 

 

Any character in string should contain one of 'q' or '-'. Character 'q' means queen is present and character '-' means it is empty. 

 

(To be more clear about the output, look at the sample test case.)

 

Constraints:

 

1 <= n <= 12 
 

Sample Test Case:

 

Sample Input:

 

4

 

Sample Output:

 

Suppose name of the returned array is ret.

 

ret [0] = 

 

[ 

"--q-",

"q---",

"---q",

"-q--"

]

 

ret [1] = 

 

[

"-q--",

"---q",

"q---",

"--q-"

]

 

Explanation:

 

There are 2 possible solutions for 4 queen problem, hence size of ret is 2 * 4, and length of each string is 4.

 

ret [i] will denote ith arrangement. 

ret [i][j] will denote jth row of ith arrangement.

ret [i][j][k] will denote kth character (if it is a queen or empty cell) of jth row in ith arrangement. 

 

Notes:


Suggested time in interview: 30 minutes; this is only a variation of permutations problems
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

5. How Many Binary Search Trees With n Nodes?
 
How Many Binary Search Trees With n Nodes?
 
 
Problem Statement:
 
Write a function that will return the number of binary search trees that can be constructed, with n nodes.
 
You have to solve this problem using recursion. (There may be other ways of solving this problem, but for the purpose of this exercise, please use recursion only).
 
Input Format:
 
There is only one argument denoting integer n.
 
Output Format:
 
Return number of binary search trees that can be constructed, with n nodes.
 
Constraints:
 
1 <= n <= 35
 

Sample Test Cases:

 

Sample Input 1:

 

1
 
Sample Output 1:
 
1
 
Explanation 1:
 
1) root
 
Sample Input 2:
 
2
 
Sample Output 2:
 
2
 
Explanation 2:
 
1) root, root->left
2) root, root->right
 
Sample Input 3:
 
3
 
Sample Output 3:
 
5
 
Explanation 3:
 
1) root, root->left, root->left->left
2) root, root->left, root->left->right
3) root, root->right, root->right->right
4) root, root->right, root->right->left
5) root, root->left, root->right
 
If you keep doing this, it will form a series called Catalan numbers. One can simply lookup the formula for Catalan numbers and write code for it.
 But that's not how we want to do this. We want to do this by understanding the underlying recursion. 
 The recursion is based on tree-topology only, as you can see by examples above, contents of the nodes of the tree do not matter.

Notes:

Suggested time in interview: 20 minutes
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.


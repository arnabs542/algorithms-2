	
Q1	Knight's Tour On A Chess Board	Coding	not answered	Solve Question
Q2	Topological Sort (alien dictionary problem)	Coding	not answered	Solve Question
Q3	Convert string from a to b, using a dictionary of words	Coding	not answered	Solve Question
Q4	Graph Representations	Multiple Choice	submitted	Modify Submission
Q5	Shortest Path In 2D Grid With Keys And Doors	Approximate Solution	not answered	Solve Question


1. Knight's Tour On A Chess Board
 

Knight's Tour On A Chess Board

 
Problem Statement:

 
You are given a rows * cols chessboard and a knight that moves like in normal chess. 


Currently knight is at starting position denoted by start_row th row and start_col th col, and want to reach at ending position denoted by end_row th row and end_col th col.  

The goal is to calculate the minimum number of moves that the knight needs to take to get from starting position to ending position.

 
start_row, start_col, end_row and end_col are 0-indexed. 

Input Format:

There are six arguments. First is an integer denoting rows, second is an integer denoting cols, third is an integer denoting start_row, fourth is an integer denoting start_col, fifth is an integer denoting end_row and sixth is an integer denoting end_col.

Output Format:

Return an integer.

If it is possible to reach from starting position to ending position then return minimum number of moves that the knight needs to take to get from starting position to ending position.

If it is not possible to reach from starting position to ending position then return -1.

Constraints:

 

1 <= rows * cols <= 10^5
0 <= start_row, end_row < rows
0 <= start_col, end_col < cols
 

Sample Test Case:

 

Sample Input:

 

rows = 5

cols = 5

start_row = 0

start_col = 0

end_row = 4

end_col = 1

 

Sample Output: 

3

 

Explanation:

 

3 moves to reach from (0, 0) to (4, 1):

 

(0, 0) -> (1, 2) -> (3, 3) -> (4, 1). 

2. Topological Sort (alien dictionary problem)
Given a sorted dictionary of an alien language, find order of characters. 

Example-1:

Input: words[] = {"baa", "abcd", "abca", "cab", "cad"}

Output: Order of characters is 'b', 'd', 'a', 'c'

 

Note that words are sorted and in the given language. "baa" comes before "abcd", therefore 'b' is before 'a' in output.

Example-2:

Input: words[] = {"caa", "aaa", "aab"}

Output: Order of characters is 'c', 'a', 'b'

Solution: 

http://www.geeksforgeeks.org/topological-sorting/

http://www.geeksforgeeks.org/given-sorted-dictionary-find-precedence-characters/

 

Notes:
Suggested time in interview: 30 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

3. Convert string from a to b, using a dictionary of words
This is a problem, that can be modeled as a Graph problem. It's a simplified version of the famous Edit Distance problem (which is DP).

You have a dictionary of words and two strings a and b.
How can one convert a to b by changing only one character at a time and making sure that all the intermediate words are in the dictionary?

Example:

dictionary: {"cat", "bat", "hat", "bad", "had"}
a = "bat"
b = "had"
solution:

"bat" -> "bad" -> "had"


Solution: http://stackoverflow.com/questions/17514999/convert-string-a-to-b-using-a-dictionary-of-words

 

Notes:
Suggested time in interview: 30 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework 
i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, 
what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. 
Take your time, but limit yourself to 2 one hour sessions for most problems.

4. Graph Representations
 

Graph Representations

 

 

Problem Statement:

 

Select options which can be used to represent a graph. 

 

Notes:


Suggested time in interview: 5 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

 

Pick the correct choices
Adjacency List
Matrix
One Variable Per Node
Neighbor List


5.Shortest Path In 2D Grid With Keys And Doors

 

Problem Statement:

 

Given a 2D grid, that represents a maze-like area. Each cell in the grid can be either land or water or door or key to some doors. 

 

Each type of key will only open one type of door. There can be multiple identical keys of the same type. There can also be multiple doors of the same type.

 

There is also a start cell and a goal cell on the land.  

 

You have to find the shortest path from start to the goal.

 

Input Format:

 

There is only one argument denoting the grid. 

 

Cells in the grid can be described as:

'#' = Water.
'.' = Land.
'a' = Key of type 'a'. All lowercase letters are keys.
'A' = Door that opens with key 'a'. All uppercase letters are doors.
'@' = Starting cell.
'+' = Ending cell (goal).
 

Output Format:

 

Return a 2D array containing the path from start to goal.

 

Suppose your path contains N cells, then output array should be of size N * 2, where (array[i][0], array[i][1]) describes a cell position.

 

Positioning of cells:

0-indexed. 

Columns: Increasing from left to right.

Rows: Increasing from top to bottom.

 

There can be multiple shortest paths, so you are free to return any of them. 

 

Constraints:

 

You can only travel on land cells, key cells and door cells, and not on water cells.
You can travel in any of the four directions (including backwards), but not diagonally.
It is okay to revisit a cell, if you need to (you can go backwards).
You cannot travel thru a door, unless you have picked up the key to that door before arriving there.
If you have picked up a certain type of key, then it can be re-used on multiple doors of same kind.
1 <= number of rows, number of columns <= 100
There will be exactly one starting point and one goal.
It is guaranteed that there exists a path from start to goal. 
'a' <= key <= 'j'
'A' <= door <= 'J'
 

Sample Test Case:
Sample Input:

...B
.b#.
@#+.
 

Sample Output:

 

[

    [2 0],

    [1 0],

    [1 1],

    [0 1], 

    [0 2],

    [0 3],

    [1 3],

    [2 3],

    [2 2]

]

 

Explanation:

 

In order to pass through door 'B', we first need to collect key to open that door and that is 'b'.   

 

'@' -> '.' -> 'b' -> '.' -> '.' -> 'B' -> '.' -> '.' -> '+' 

 

Here position [2 0] is '@' in the grid above, which is the starting position.

 

Notes:
Suggested time in interview: at least 40 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

 
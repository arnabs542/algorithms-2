

Q1 Longest Common SubSequence	Approximate Solution	not answered	Solve Question
Q2	Matrix Chain Multiplication	Coding	not answered	Solve Question
Q3	Strings interleave	Coding	not answered	Solve Question
Q4	Word Wrap	Coding	not answered	Solve Question
Q5	Balanced Partition	Coding	not answered	Solve Question
Q6	Maximum size sub-matrix	Approximate Solution	not answered	Solve Question


1. Longest Common SubSequence
Given two sequences, find the longest subsequence present in both of them.  (Not just the length, but the actual string)

The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences). 
It differs from problems of finding common substrings: unlike substrings, subsequences are not required to occupy consecutive positions within the original sequences. 
The longest common subsequence problem is a classic computer science problem, the basis of data comparison programs such as the diff utility, and has applications in bioinformatics. 
It is also widely used by revision control systems such as Git for reconciling multiple changes made to a revision-controlled collection of files. (Source Wikipedia).

 

For example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”, .. etc are subsequences of “abcdefg”. So a string of length 'n' has 2^n different possible subsequences.

 

LCS for input Sequences “ABCDGH” and “AEDFHR” is “ADH” of length 3.
LCS for input Sequences “AGGTAB” and “GXTXAYB” is “GTAB” of length 4.

 

Return empty string if there is no such common subsequence.

 

Solution: http://www.geeksforgeeks.org/printing-longest-common-subsequence/

 

 

Notes:
Suggested time in interview: 30 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

2. Matrix Chain Multiplication
(Another classical DP problem, which interviewers love)

Given a sequence of matrices, find the most efficient way to multiply these matrices together. 
The problem is not actually to perform the multiplications, but merely to decide in which order to perform the multiplications.
We have many options to multiply a chain of matrices because matrix multiplication is associative. 
In other words, no matter how we parenthesize the product, the result will be the same. 
For example, if we had four matrices A, B, C, and D, we would have:

    (ABC)D = (AB)(CD) = A(BCD) = ....
However, the order in which we parenthesize the product affects the number of simple arithmetic operations needed to compute the product, or the efficiency. For example, suppose A is a 10 × 30 matrix, B is a 30 × 5 matrix, and C is a 5 × 60 matrix. Then,

    (AB)C = (10×30×5) + (10×5×60) = 1500 + 3000 = 4500 operations
    A(BC) = (30×5×60) + (10×30×60) = 9000 + 18000 = 27000 operations.
Clearly the first parenthesization requires less number of operations.

Given an array p[] which represents the chain of matrices such that the ith matrix Ai is of dimension p[i-1] x p[i]. We need to write a function MatrixChainOrder() that should return the minimum number of multiplications needed to multiply the chain.

  Input: p[] = {40, 20, 30, 10, 30}   
  Output: 26000  
  There are 4 matrices of dimensions 40x20, 20x30, 30x10 and 10x30.
  Let the input 4 matrices be A, B, C and D.  The minimum number of 
  multiplications are obtained by putting parenthesis in following way
  (A(BC))D --> 20*30*10 + 40*20*10 + 40*10*30

  Input: p[] = {10, 20, 30, 40, 30} 
  Output: 30000 
  There are 4 matrices of dimensions 10x20, 20x30, 30x40 and 40x30. 
  Let the input 4 matrices be A, B, C and D.  The minimum number of 
  multiplications are obtained by putting parenthesis in following way
  ((AB)C)D --> 10*20*30 + 10*30*40 + 10*40*30

  Input: p[] = {10, 20, 30}  
  Output: 6000  
  There are only two matrices of dimensions 10x20 and 20x30. So there 
  is only one way to multiply the matrices, cost of which is 10*20*30
 
Source and Solution: http://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/

Notes:
Suggested time in interview: 40 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

3. Strings interleave
You're given three strings A, B and I. Write a function that checks whether I is an interleaving of A and B. String I is said to be interleaving string A and B, if it contains all characters of A and B and order of all characters in individual strings is preserved.

 

See test-cases below. Format  {String I, String A, String B, True/False}:

 

Solution: http://www.geeksforgeeks.org/check-whether-a-given-string-is-an-interleaving-of-two-other-given-strings-set-2/

 

 
 	{"1234", "123", "123", 0},
 	{"112233", "123", "123", 1},
 	{"123456", "123456", "", 1},
 	{"123456", "", "123456", 1},
 	{"12345678", "1234", "5678", 1},
 	{"12345678", "1233", "5678", 0}
 	};
 

 

 

Notes:
Suggested time in interview: 30 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

4. Word Wrap
Given a sequence of words, and a limit on the number of characters that can be put in one line (line width). Put line breaks in the given sequence such that the lines are printed neatly. Assume that the length of each word is smaller than the line width.

 

The word processors like MS Word do task of placing line breaks. The idea is to have balanced lines. In other words, not have few lines with lots of extra spaces and some lines with small amount of extra spaces.

 

The extra spaces includes spaces put at the end of every line.  
The problem is to minimize the following total cost.

 Cost of a line = (Number of extra spaces in the line)^3
 Total Cost = Sum of costs for all lines
Please note that the total cost function is not sum of extra spaces, but sum of cubes of extra spaces. The idea behind this cost function is to balance the spaces among lines. For example, consider the following two arrangement of same set of words:

 

1) There are 3 lines. One line has 3 extra spaces and all other lines have 0 extra spaces. Total extra spaces = 3 + 0 + 0 = 3. Total cost = 3*3*3 + 0*0*0 + 0*0*0 = 27.

 

2) There are 3 lines. Each of the 3 lines has one extra space. Total extra spaces = 1 + 1 + 1 = 3. Total cost = 1*1*1 + 1*1*1 + 1*1*1 = 3.

Total extra spaces are 3 in both scenarios, but second arrangement should be preferred because extra spaces are balanced in all three lines. The cost function with cubic sum serves the purpose because the value of total cost in second scenario is less.

 

Problem and Solution: http://www.geeksforgeeks.org/dynamic-programming-set-18-word-wrap/ [The problem statement here is a bit flawed, but the code and explanation is resonable]

 

(Slightly different variation: https://leetcode.com/problems/text-justification/)

 

 

Notes:
Suggested time in interview: 40 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

5. Balanced Partition
(This is an extension and generalization of SumZero problem)

 

Partition an array into two partitions, such that sum of two halves is the same.

* Assume that the sum of all elements in the array is even. 

* Numbers can be positive or negative, viz non-zero integers

* Numbers can repeat.

* If there are multiple such partitions possible, then print any one.

* When you print, try to preserve the order of elements when you print them.

 

e.g. 

Input: 4, 1, -5, 6, -11, 3

Output: 4, 6, -11 and 1, -5, 3 (Both sum to -1)

 

 

Solution: http://www.geeksforgeeks.org/dynamic-programming-set-18-partition-problem/

 

 

Notes:
Suggested time in interview: 30 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

6. Maximum size sub-matrix
Given a binary matrix, find out the maximum size square sub-matrix with all 1s.

 

Given this matrix:

 
   0  1  1  0  1 
   1  1  0  1  0 
   0  1  1  1  0
   1  1  1  1  0
   1  1  1  1  1
   0  0  0  0  0
The maximum square sub-matrix with all set bits is

    1  1  1
    1  1  1
    1  1  1
 

Please hard-code your test-cases. That will give you more flexibility in input and output. For the output for example, you can either print the matrix, or simply return the top left and bottom corner index values - your choice.

 

(It's debatable whether the solution to this problem can strictly be categorized as a DP solution. Nevertheless, this is an important problem to solve and it's challenging!)

 

Solution: http://www.geeksforgeeks.org/maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix/

 

 

Notes:
Suggested time in interview: 30 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.
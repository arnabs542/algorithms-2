	
Q1	Levenshtein Distance (also called Edit Distance)	Coding	not answered	Solve Question
Q2	Word Break	Coding	not answered	Solve Question
Q3	Making Change	Approximate Solution	not answered	Solve Question
Q4	Coin play	Coding	not answered	Solve Question
Q5	Knight's tour!	Coding	not answered	Solve Question
Q6	Count ways to reach the n’th stair	Coding	not answered	Solve Question
Q7	Robbery	Coding	not answered	Solve Question


1. Levenshtein Distance (also called Edit Distance)
Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character

e.g. Minimum edit distance between the words 'kitten' and 'sitting', is 3

kitten → sitten (substitution of "s" for "k")
sitten → sittin (substitution of "i" for "e")
sittin → sitting (insertion of "g" at the end).
 

(Assume all inputs and substitutions in lower case)

More about Levenshtein Distance: https://en.wikipedia.org/wiki/Levenshtein_distance

Solution: http://www.geeksforgeeks.org/dynamic-programming-set-5-edit-distance/

2. Word Break
Given an input string and a dictionary of words, segment the input string into a space-separated sequence of dictionary words if possible.

 

For example, if the input string is "applepie" and dictionary contains a standard set of English words, then we would return the string "apple pie" as output.

 

If you can find multiple arrangements, then print all such combinations.


 

Solution: http://www.programcreek.com/2014/03/leetcode-word-break-ii-java/

 

 

Notes:
Suggested time in interview: 30 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

3. Making Change
You are given n types of coin denominations of values v(1) < v(2) < ... < v(n) (all integers). 
Give an algorithm which makes change for an amount of money C with as few coins as possible. 

 

* Assume there are multiple coins of every denomination. 

* Assume v(1) = 1, (i.e. there is always a combination that leads to C).

* There may be multiple ways of reaching C. We want a DP based solution that leads to the method using least number of coins.

* Input: C and Denominations Array

* Output: Combination using minimum number of coins (repeat coins ok) that leads to C.  Print any one.

 

For extra credit (read: agony): There may be multiple such combinations. Print all such combinations. Hint: You'll need to do recursion on the DP table. 

 

e.g. 

Input:

Denominations: 1,2,3

C: 4

Output on two lines:

1,3

2,2

 

Note that test-case output is for the extra-credit case. If you're not doing that (at first, you should ignore extra credit), then read the output appropriately.

 

Solution with explanation: https://discuss.leetcode.com/topic/35720/easy-to-understand-recursive-dp-solution-using-java-with-explanations

More efficient solution, but with no explanation: https://discuss.leetcode.com/topic/32475/c-o-n-amount-time-o-amount-space-dp-solution/4

 

More solutions can be found in our Github Repo: https://github.com/InterviewKickstart/CodingProblemsIK/tree/master/DynamicProgramming

 

No solution is provided for extra credit. Run it by the TA or the instructor :-) It's harder than what is expected in interviews.

 

 

Notes:
Suggested time in interview: 30 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.

4. Coin play
Consider a row of n coins of values v1 . . . vn, where n is even. We play a game against an opponent by alternating turns. In each turn, a player selects either the first or last coin from the row, removes it from the row permanently, and receives the value of the coin. Determine the maximum possible amount of money we can definitely win if we move first.

 

Assume full competency by both players.

 

Example:

Coins given: 8, 15, 3, 7.

 

Player 1 can start two different ways: either picking 8 or picking 7. Depending on the choice s/he makes, the end reward will be different.
 We want to find the maximum reward the first player can collect.

 

1.
…….Player-1 chooses 8.
…….Opponent chooses 15.
…….Player-1 chooses 7.
…….Opponent chooses 3.
Total value collected by Player-1 is 15(8 + 7) (Greedy strategy i.e. pick the highest at every step)

 

2.
…….Player-1 chooses 7.
…….Opponent chooses 8.
…….Player-2 chooses 15.
…….Opponent chooses 3.
Total value collected by Player-1 is 22(7 + 15)

 

Given these two strategies, we want 22 as the answer, and not 15. 

 

Solution: http://www.geeksforgeeks.org/dynamic-programming-set-31-optimal-strategy-for-a-game/

 

 

Notes:
Suggested time in interview: 30 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework 
i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, 
what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. 
Take your time, but limit yourself to 2 one hour sessions for most problems.

5. Knight's tour!
Given a phone keypad as shown below:

1 2 3
4 5 6
7 8 9
  0
How many different phone numbers of given length can be formed starting from given digit?

The constraint is that the movement from one digit to the next is similar to the movement of the Knight in a chess game.

For eg. if we are at 1 then the next digit can be either 6 or 8 if we are at 6 then the next digit can be 1, 7 or 0.

Repetition of digits are allowed - 1616161616 is a valid number. 

The problem requires us to just give the count of  different phone numbers and not necessarily list the numbers.

Find a polynomial time solution, based on Dynamic Programming.

Solution: http://stackoverflow.com/questions/2893470/generate-10-digit-number-using-a-phone-keypad

6. Count ways to reach the n’th stair
(This is simple. Make me proud)

 

There are n stairs, a person standing at the bottom wants to reach the top. The person can climb either 1 stair or 2 stairs at a time. 
Count the number of ways, the person can reach the top.

 

Input: n = 1
Output: 1
There is only one way to climb 1 stair

Input: n = 2
Output: 2
There are two ways: (1, 1) and (2)

Input: n = 4
Output: 5
(1, 1, 1, 1), (1, 1, 2), (2, 1, 1), (1, 2, 1), (2, 2)
 

Solve the problem for general case i.e. For N stairs, and different kinds of steps that can be taken (e.g. instead of only 1 or 2 steps, 
it could be 2, 3 and 5 steps at a time)

 

Source and Solution: http://www.geeksforgeeks.org/count-ways-reach-nth-stair/

7. Robbery
There are n houses built in a line, each of which contains some value in it. A thief is going to steal the maximal value in these houses, 
but he cannot steal in two adjacent houses because the owner of a stolen house will tell his two neighbors on the left and right side.
 What is the maximal stolen value?


For example, if there are four houses with values {6, 1, 2, 7}, the maximal stolen value is 13 when the first and fourth houses are stolen.
 

Solution: http://codercareer.blogspot.com/2013/02/no-44-maximal-stolen-values.html

 

 

Notes:
Suggested time in interview: 30 minutes.
The “Suggested Time” is the time expected to complete this question during a real-life interview, not now in homework i.e. For the first attempt of a given homework problem, the focus should be to understand what the problem is asking, what approach you are using, coding it, as well as identifying any gaps that you can discuss during a TA session. Take your time, but limit yourself to 2 one hour sessions for most problems.